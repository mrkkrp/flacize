#!/usr/bin/env python
#
# Convert any audio files into CDDA quality FLAC tracks.
#
# Copyright © 2015 Mark Karpov <markkarpov@openmailbox.org>
#
# flacize is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# flacize is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

import argparse
import fnmatch
import itertools
import os
import re
import shutil
import subprocess
import sys
import taglib

# Constants and other useful values

prog_name = os.path.basename(__file__)
version = '0.1.0'
description = 'Convert any audio files into CDDA quality FLAC tracks'
license = """flacize — Convert any audio files into CDDA quality FLAC tracks

Copyright © 2015 Mark Karpov

flacize is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

flacize is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along
with this program. If not, see <http://www.gnu.org/licenses/>.
"""

aexts = frozenset( # recognized audio formats and corresponding extensions:
    { 'aac'    # Advanced Audio Coding
    , 'aif'    # Audio Interchange File Format
    , 'aifc'   # Audio Interchange File Format
    , 'aiff'   # Audio Interchange File Format
    , 'ape'    # Monkey's Audio
    , 'flac'   # Free Lossless Audio Codec
    , 'm4a'    # Advanced Audio Coding
    , 'm4p'    # Advanced Audio Coding
    , 'mp4'    # Advanced Audio Coding
    , 'wav'    # Microsoft Wave
    , 'wma' }) # Windows Media Audio 9 Lossless

parser = argparse.ArgumentParser(description=description)
parser.add_argument('dir', metavar='DIR', nargs='?', default=os.getcwd(),
                    help='directory to scan')
parser.add_argument('-o', '--output', metavar='DIR', dest='out_dir', default='',
                    help='output directory (created if needed)')
parser.add_argument('-r', '--rate', metavar='N', dest='rate', default=44100,
                    help='output sample rate (defaults to 44100 Hz)')
parser.add_argument('-w', '--width', metavar='N', dest='width', default=16,
                    help='output sample width (defaults to 16 bit)')
parser.add_argument('-c', '--channels', metavar='N', dest='chs', default=2,
                    help='number of channels (defaults to 2)')
parser.add_argument('-p', '--preserve', action='store_true', dest='preserve',
                    help='preserve quality of originals')
parser.add_argument('-d', '--delete', action='store_true', dest='delete',
                    help='delete original files after conversion')
parser.add_argument('-s', '--shift', metavar='N', dest='shift', default=0,
                    help='add N to index of every track')
parser.add_argument('-t', '--total', metavar='N', dest='total',
                    help='specify total number of tracks N')
parser.add_argument('-e', '--crop', metavar='N', dest='crop', default=0,
                    help='crop last N tracks (e.g. remove bonus tracks)')
parser.add_argument('-a', '--dont-ask', action='store_true', dest='dont_ask',
                    help="don't ask user even if cannot deduce some tag")
parser.add_argument('--license', action='store_true', dest='show_license',
                    help="show program's license and exit")
parser.add_argument('--version', action='version',
                    version='%(prog)s ' + version)

args = parser.parse_args()

# Some functions that help us to fulfill our task.

def failure(str):
    """
    Print error message ‘str’ to stderr and exit with code 1.
    """
    print(prog_name, ": error: ", str, file=sys.stderr)
    exit(1)

def tag_fallback(tag_name, deduced_val='?') -> str:
    """
    Ask user to enter value of tag ‘tag_name’ manually (last resort). Return
    user's input or value of ‘deduced_val’ is ‘args.dont_ask’ is
    ‘True’. Remember return value and use it if the same tag is asked
    again. This function is best for “ALBUM”, “ARTIST”, and “DATE” tags.
    """
    if not tag_name in tag_fallback.vals:
        tag_fallback.vals[tag_name] = (deduced_val if args.dont_ask else
    input('Cannot deduce value of tag ‘%s’ ≈ “%s”: ' % (tag_name, deduced_val))
        or deduced_val)
    return tag_fallback.vals[tag_name]

tag_fallback.vals = {} # here we store already asked tags

def extract_title(s) -> str:
    """
    Return sub-string of ‘s’ from first alphabetic char to end.
    """
    return s[next((i for i, v in enumerate(s) if v.isalpha())):]

def extract_num_prefix(s) -> str:
    """
    Return sub-string of ‘s’ containing its (possibly empty) numeric prefix.
    """
    return ''.join(itertools.takewhile(str.isdecimal, s.strip()))

def simplify_tag(s) -> str:
    """
    Simplify tag deleting trailing white space, extra white space between
    words, and everything in brackets []. Also, trim leading zeros.
    """
    return ' '.join(re.sub(r'\[.*\]', '', s).split()).lstrip('0')

def output_name(out_dir, name, ext) -> str:
    """
    Join directory ‘out_dir’, base name ‘name’ and extension ‘ext’. ‘name’
    is transformed so it can be used on all major operating systems.
    """
    return os.path.join(out_dir, re.sub(r'[\x00/\\?%*:|"<>]', '_', name) +
                        os.path.extsep + ext if ext else '')

class Track:
    """
    The class models a track to convert. It includes information about
    location of original file, name of result file, possible changes in
    various parameters of audio and collection of tags.
    """
    def __init__(self, origin, tags={},
                 start_time=None, end_time=None,
                 raw_index=1, raw_total=1):
        self.origin = origin
        # set quality parameters unless we must preserve it
        if args.preserve:
            self.sample_rate  = None
            self.sample_width = None
            self.channels     = None
        else:
            self.sample_rate  = args.rate
            self.sample_width = args.width
            self.channels     = args.chs
        # start and end time (only useful when splitting a CUE)
        self.start_time = start_time
        self.end_time = end_time
        # copy or deduce tags, ‘tags’ variable contains raw extracted data
        self.tags = {}
        pdir  = os.path.basename(os.path.abspath(args.dir))
        bname = os.path.splitext(os.path.basename(origin))[0]
        # ALBUM
        self.tags['ALBUM'] = (tags.get('ALBUM')
            or tag_fallback('ALBUM', extract_title(pdir)))
        # ARTIST
        self.tags['ARTIST'] = (tags.get('ARTIST')
            or tag_fallback('ARTIST'))
        # DATE
        self.tags['DATE'] = (tags.get('DATE')
            or tag_fallback('DATE', extract_num_prefix(pdir)))
        # TITLE
        self.tags['TITLE'] = (tags.get('TITLE')
            or extract_title(bname))
        # TRACKNUMBER & TRACKTOTAL
        tnum, *atot = (tags.get('TRACKNUMBER')
            or extract_num_prefix(bname)).split('/')
        tnum = (int(tnum) if tnum else raw_index) + args.shift
        if args.total:
            ttot = args.total
        else:
            ttot = tags.get('TRACKTOTAL', atot and atot[0])
            ttot = int(ttot) if ttot else raw_total
        self.tags['TRACKNUMBER'] = str(tnum)
        self.tags['TRACKTOTAL'] = str(ttot)
        # simplify tag values after all…
        self.tags = {tag: simplify_tag(self.tags[tag]) for tag in self.tags}
        # get output file name
        if args.crop and ttot - tnum < args.crop:
            self.result = None
        else:
            self.result = output_name(args.out_dir,
                ('%02d' % tnum) + ' ' + self.tags['TITLE'], 'flac')

    def convert_file(self) -> str:
        """
        Convert the audio file using FFmpeg converter.
        """
        cmd = ['ffmpeg', '-y']
        def add_to_cmd(value, option):
            nonlocal cmd
            if value:
                cmd.extend([option, str(value)])
        add_to_cmd(self.start_time, '-ss')
        add_to_cmd(self.end_time, '-to')
        add_to_cmd(self.sample_rate, '-ar')
        add_to_cmd({8: 'u8', 16: 's16', 32: 's32'}.get(self.sample_width),
                   '-sample_fmt')
        add_to_cmd(self.channels, '-ac')
        cmd.extend(['-i', self.origin,
                    '-acodec', 'flac',
                    '-compression_level', '8',
                    self.result])
        print(cmd) # subprocess.call(cmd)
        # F = taglib.File(self.result)
        # F.tags = {k: [self.tags[k]] for k in self.tags}
        # F.save()
        print('tags: ', {k: [self.tags[k]] for k in self.tags})
        self.result

def get_tracks() -> list:
    """
    Return list of dictionaries containing full description of every track
    to process. The returned information is already corrected according to
    used command line options. Directory to scan is ‘arg.dir’, dispatch for
    .cue + audio data is automatic.
    """
    all_files = [os.path.join(args.dir, f) for f in os.listdir(args.dir)]
    cue_files = fnmatch.filter(all_files, '*.cue')
    if len(cue_files) > 1:
        failure('too many .cue files in ‘%s’' % os.path.abspath(arg.dir))
    if len(cue_files) == 1:
        return get_cue_tracks(cue_files[0])
    else:
        return get_dis_tracks([f for f in sorted(all_files)
                               if os.path.splitext(f)[1][1:] in aexts])

def get_cue_tracks(cue_file) -> list:
    """
    Return list of dictionaries containing full description of every track to
    process. This function tries to process .cue + audio thing.
    """
    failure('Not implemented yet!')

def get_dis_tracks(files) -> list:
    """
    Return list of dictionaries containing full description of every track
    to process. This function works with collection of separate tracks.
    """
    total = len(files)
    tracks = []
    for (i, f) in enumerate(files):
        F = taglib.File(f)
        tags = {k: F.tags[k][0] for k in F.tags}
        tracks.append(Track(f, tags=tags, raw_index=i, raw_total=total))
    return tracks

# Execution starts here, show license if user wants to see it.

if args.show_license:
    print(license)
    exit(0)

# Test if FFmpeg console application is present on this system, just in
# case.

if not shutil.which('ffmpeg'):
    failure('cannot find ‘ffmpeg’ program')

# If user has specified output directory, we should make sure that it does
# exist.

if args.out_dir: os.makedirs(args.out_dir, exist_ok=True)

# First of all, we need to get list of dictionaries that contain meta-data,
# file name, information about start time and end time, indexation and total
# number of tracks, etc. The whole list must be formed before translation
# because need to have all the data at once (for example to count total
# number of tracks or specify start and end time for audio that comes with a
# .cue file). Every dictionary in the list may duplicate some info, the idea
# is that it must contain full description of given track for processing.

tracks = get_tracks()

for track in tracks:
    track.convert_file()

if args.delete:
    for origin in {track.origin for track in tracks}:
        print('deleting ', origin) # os.remove(origin)
