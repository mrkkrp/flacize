#!/usr/bin/env python
#
# Convert any audio files into CDDA quality FLAC tracks.
#
# Copyright © 2015 Mark Karpov <markkarpov@openmailbox.org>
#
# flacize is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# flacize is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

import argparse, os, sys

# Constants and other useful values

prog_name = os.path.basename(__file__)
version = '0.1.0'
description = 'Convert any audio files into CDDA quality FLAC tracks'
license = """flacize — Convert any audio files into CDDA quality FLAC tracks

Copyright © 2015 Mark Karpov

flacize is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

flacize is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along
with this program. If not, see <http://www.gnu.org/licenses/>.
"""

parser = argparse.ArgumentParser(description=description)
parser.add_argument('dir', metavar='DIR', nargs='?', default=os.getcwd(),
                    help='directory to scan')
parser.add_argument('-o', '--output', metavar='DIR', dest='out_dir', default='',
                    help='output directory (created if needed)')
parser.add_argument('-r', '--rate', metavar='N', dest='rate', default=44100,
                    help='output sample rate (defaults to 44100 Hz)')
parser.add_argument('-w', '--width', metavar='N', dest='width', default=16,
                    help='output sample width (defaults to 16 bit)')
parser.add_argument('-c', '--channels', metavar='N', dest='chs', default=2,
                    help='number of channels (defaults to 2)')
parser.add_argument('-p', '--preserve', action='store_true', dest='preserve',
                    help='preserve quality of originals')
parser.add_argument('-d', '--delete', action='store_true', dest='delete',
                    help='delete original files after conversion')
parser.add_argument('-s', '--shift', metavar='N', dest='shift', default=0,
                    help='add N to index of every track')
parser.add_argument('-t', '--total', metavar='N', dest='total',
                    help='specify total number of tracks N')
parser.add_argument('-e', '--crop', metavar='N', dest='crop', default=0,
                    help='crop last N tracks (e.g. remove bonus tracks)')
parser.add_argument('--license', action='store_true', dest='show_license',
                    help="show program's license and exit")
parser.add_argument('--version', action='version',
                    version='%(prog)s ' + version)

args = parser.parse_args()

# Execution starts here, show license if user wants to see it.

if args.show_license:
    print(license)
    exit(0)

# List of features:

# - Output format: FLAC tracks, always use maximal compression.

# - User should be able to specify output quality.

# - Default quality should be CDDA: 44.1 kHz, 16 bit, 2 channels.

# - An option to preserve quality.

# - Process files in current directory or in specified directory.

# - An option to specify output directory (created if needed).

# - An option to delete original files automatically.

# - An option to increment index of every composition.

# - An option to specify total number of compositions (overwrite inferred).

# - An option to eliminate N last tracks (correct total number of tracks
#   unless it's specified explicitly).

# - If there is a .cue file in actual directory, find corresponding audio
#   file and split it as needed, produce separate tracks.

# - If there are several .cue files in actual directory, abort execution and
#   tell user that he needs to store stuff separately.

# - For CUEd files .cue files is the source of tags.

# - Preserve useful tags: «artist», «album», «year», «title», but process
#   them so they are in normal form (delete extra white-space, etc).

# - If tag «track index» present, use it to calculate index of composition
#   (but correct it too, delete leading zeros, for example). If such a tag
#   is missing and we deal with separate tracks, use index of actual
#   composition in list of sorted file names to get its index.

# - Tag «total tracks» is either given explicitly or it's calculated as
#   total number of files to process (see additional manipulations above).

# - Make sure that tags «comment» and «genre» are always empty, as well as
#   all other tags that we don't specify explicitly (total number of disks,
#   for example).

# - Names of result files are not the same as original (which may be absent
#   if it's .cue + single audio file scheme), but are composed by this
#   pattern ‘NN Composition Title.flac’. So tag «track index» and «title»
#   determine file name fully.
